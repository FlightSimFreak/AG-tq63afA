local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

local Player = Players.LocalPlayer
local Character = Player.Character or Player.CharacterAdded:Wait()

local camera = workspace.CurrentCamera

local Window = Rayfield:CreateWindow({
   Name = "Faceless Premium Hub",
   LoadingTitle = "Premium Hub",
   LoadingSubtitle = "by Faceless",
   ConfigurationSaving = {
      Enabled = false,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Test123"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})
--[Notifier]
Rayfield:Notify({
    Title = "Notification Title",
    Content = "Successfully Executed",
    Duration = 6.5,
    Actions = { -- Notification Buttons
       Ignore = {
          Name = "Ok",
          Callback = function()
          print("The user clicked Ok")
       end
    },
 },
 })

--[Home/Main Section]
local Home = Window:CreateTab("üè† Home") -- Title, Image
local Main = Home:CreateSection("Main")

-- [Local Player]
local LocalPlayer = Window:CreateTab("Local Player")
local LocalPlayerSection = LocalPlayer:CreateSection("Main Settings")

local Label = LocalPlayer:CreateLabel("Clan Must Start With A Captial Letter")
local Input = LocalPlayer:CreateInput({
   Name = "Change Clan",
   PlaceholderText = "Type Clan Name",
   RemoveTextAfterFocusLost = false,
   Callback = function(Text)
   -- The function that takes place when the input is changed
   -- The variable (Text) is a string for the value in the text box
    local data = ReplicatedStorage.Player_Data[Player.Name]
    data.Clan.Value = Text
   end,
})

local KillPlayerButton = LocalPlayer:CreateButton({
    Name = "Kill Character",
    Callback = function()
    -- The function that takes place when the button is pressed
     Character.Humanoid.Health = 0
    end,
 })
 
-- [ESP]
local ESP = Window:CreateTab("ESP")
local ESPSection = ESP:CreateSection("ESP Settings")

local ESPLabels = {}
local DrawingPool = {}

local function getDrawingObject()
    local drawingObject = next(DrawingPool) or Drawing.new("Text")
    DrawingPool[drawingObject] = nil
    drawingObject.Visible = false
    drawingObject.Center = true
    drawingObject.Outline = true
    drawingObject.Font = 2
    drawingObject.Color = Color3.fromRGB(255, 255, 255)
    drawingObject.Size = 13
    return drawingObject
end

local function returnDrawingObject(drawingObject)
    drawingObject.Visible = false
    DrawingPool[drawingObject] = true
end

local function updatePlayerESP(player, labelData)
    local playerESP, playerPower, playerArt, playerHealth = labelData.ESP, labelData.Power, labelData.Art, labelData.Health

    if player == Player or not Players:FindFirstChild(player.Name) then
        playerESP.Visible, playerPower.Visible, playerArt.Visible, playerHealth.Visible = false, false, false, false
    else
        local humanoidRootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart then
            local position, onScreen = camera:WorldToViewportPoint(humanoidRootPart.Position)
            local powerValue = ReplicatedStorage.Player_Data[player.Name].Power.Value
            local artValue = ReplicatedStorage.Player_Data[player.Name].Demon_Art.Value
            local healthValue = workspace[Player.Name].Humanoid.Health

            playerESP.Position, playerESP.Visible, playerESP.Text = Vector2.new(position.X, position.Y), onScreen, "Username: " .. player.Name
            playerHealth.Position, playerHealth.Visible, playerHealth.Text = Vector2.new(position.X, position.Y + 30), onScreen, "Health: " .. healthValue
            
            local playerRace = ReplicatedStorage.Player_Data[player.Name].Race.Value
            if playerRace == 1 or playerRace == 2 then
                playerPower.Position, playerPower.Visible, playerPower.Text = Vector2.new(position.X, position.Y + 15), onScreen, "Breathing: " .. powerValue
                playerPower.Visible = true
            else
                playerPower.Visible = false
            end

            if playerRace == 3 then
                playerArt.Position, playerArt.Visible, playerArt.Text = Vector2.new(position.X, position.Y + 15), onScreen, "Art: " .. artValue
                playerArt.Visible = true
            else
                playerArt.Visible = false
            end
        else
            playerESP.Visible, playerPower.Visible, playerArt.Visible, playerHealth = false, false, false, false
        end
    end
end


local function createESP(player)
    local playerESP, playerPower, playerArt , playerHealth = getDrawingObject(), getDrawingObject(), getDrawingObject(), getDrawingObject()
    local RenderStepped
    RenderStepped = RunService.Heartbeat:Connect(function()
        updatePlayerESP(player, ESPLabels[player])
    end)

    ESPLabels[player] = {
        ESP = playerESP,
        Power = playerPower,
        Art = playerArt,
        Health = playerHealth,
        RenderStepped = RenderStepped
    }
end

local function updateESPLabels()
    for player, labelData in pairs(ESPLabels) do
        updatePlayerESP(player, labelData)
    end
end

local function removeESP(player)
    local labelData = ESPLabels[player]
    if labelData then
        local playerESP, playerPower, playerArt, playerHealth = labelData.ESP, labelData.Power, labelData.Art, labelData.Health
        playerESP.Visible, playerPower.Visible, playerArt.Visible, playerHealth.Visible = false, false, false, false
        returnDrawingObject(playerESP)
        returnDrawingObject(playerPower)
        returnDrawingObject(playerArt)
        returnDrawingObject(playerHealth)
        labelData.RenderStepped:Disconnect()
        ESPLabels[player] = nil
    end
end

Players.PlayerAdded:Connect(createESP)
Players.PlayerRemoving:Connect(removeESP)

local Toggle = ESP:CreateToggle({
    Name = "Toggle ESP",
    CurrentValue = false,
    Callback = function(Value)
        if Value then
            for _, player in ipairs(Players:GetPlayers()) do
                createESP(player)
            end
            RunService.Heartbeat:Connect(updateESPLabels)
        else
            for player, _ in pairs(ESPLabels) do
                removeESP(player)
            end
            ESPLabels = {}
            if HeartbeatConnection then
                HeartbeatConnection:Disconnect()
                HeartbeatConnection = nil
            end
        end
    end,
})

 -- [Teleport Section]
local Teleport = Window:CreateTab("Teleport")
local TeleportSection = Teleport:CreateSection("Teleport")

local teleportMode = "Instant" -- Default mode is instant teleportation

local selectedOption = "Nomay Village"

local TeleportPlace = Teleport:CreateDropdown({
    Name = "Select Place",
    Options = {"Nomay Village","Cave 1","Cave 2","Frozen Lake","Village 2","Wop's Trainings Grounds","Beast Cave","Wop City","Mugen Train Station","Akeza Cave","Sound Cave","Snowy Place","Devourers Jaw"},
    CurrentOption = {"Nomay Village"},
    MultipleOptions = false,
    Flag = "TeleportPlaceDropDown", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Option)
    -- The function that takes place when the selected option is changed
    -- The variable (Option) is a table of strings for the current selected options
    selectedOption = Option[1]
    end,
 })
 local teleportModeDropdown = Teleport:CreateDropdown({
    Name = "Teleport Mode",
    Options = {"Instant", "Tween"},
    CurrentOption = {"Instant"},
    MultipleOptions = false,
    Flag = "TeleportModeDropdown",
    Callback = function(Option)
        teleportMode = Option[1]
    end,
})

local TweenSlider = Teleport:CreateSlider({
    Name = "Tween Speed",
    Range = {250, 800},
    Increment = 1,
    Suffix = "TweenSpeed",
    CurrentValue = 250,
    Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    -- The function that takes place when the slider changes
    -- The variable (Value) is a number which correlates to the value the slider is currently at
    TweenSpeed = Value
    end,
 })

 local TeleportButton = Teleport:CreateButton({
    Name = "Teleport",
    Callback = function()
        local HumanoidRootPart = Character:FindFirstChild("HumanoidRootPart")
        if not HumanoidRootPart then
            return
        end
        local destinationCFrame
        if selectedOption    == "Nomay Village" then
            destinationCFrame = CFrame.new(3562.02393, 671.141846, -2109.16504, 0.999506354, 0, 0.0314173438, 0, 1, 0, -0.0314173438, 0, 0.999506354)
        elseif selectedOption == "Cave 1" then
            destinationCFrame = CFrame.new(4252.93799, 671.734131, 581.171997, 0.366371155, 0, 0.930468798, 0, 1, 0, -0.930468798, 0, 0.366371155)
        elseif selectedOption == "Cave 2" then
            destinationCFrame = CFrame.new(1182.69189, 485.428528, -1192.29797, 0.988524616, 0, 0.151059926, 0, 1, 0, -0.151059926, 0, 0.988524616)
        elseif selectedOption == "Frozen Lake" then
            destinationCFrame = CFrame.new(2049.28589, 481.052368, -769.825012, -0.998667717, 0, 0.0516033694, 0, 1, 0, -0.0516033694, 0, -0.998667717)
        elseif selectedOption == "Village 2" then
            destinationCFrame = CFrame.new(1215.526, 567.439087, 95.4790039, -0.027158618, 0, 0.999631166, 0, 1, 0, -0.999631166, 0, -0.027158618)
        elseif selectedOption == "Wop's Trainings Grounds" then
            destinationCFrame = CFrame.new(223.950012, 595.685791, 483.423035, 0.414027214, 0, 0.910264492, 0, 1, 0, -0.910264492, 0, 0.414027214)
        elseif selectedOption == "Beast Cave" then
             destinationCFrame = CFrame.new(1840.25903, 481.646973, 37.3059998, 0.217094183, -0, -0.976150632, 0, 1, -0, 0.976150632, 0, 0.217094183)
        elseif selectedOption == "Wop City" then
             destinationCFrame = CFrame.new(-31.2180176, 599.328125, -431.309998, 0.823900342, 0, 0.566734731, 0, 1, 0, -0.566734731, 0, 0.823900342)
        elseif selectedOption == "Mugen Train Station" then
             destinationCFrame = CFrame.new(783.809998, 495.249878, 900.332031, 0.730878294, 0, 0.682507813, 0, 1, 0, -0.682507813, 0, 0.730878294)
        elseif selectedOption == "Akeza Cave" then
             destinationCFrame = CFrame.new(1902.86096, 554.113892, -150.781998, 0.669671535, -0, -0.742657483, 0, 1, -0, 0.742657483, 0, 0.669671535)  
        elseif selectedOption == "Sound Cave" then
             destinationCFrame = CFrame.new(1828.77405, 485.277588, -2770.83594, 0.950608253, 0, 0.310393244, 0, 1, 0, -0.310393244, 0, 0.950608253)
        elseif selectedOption == "Snowy Place" then
             destinationCFrame = CFrame.new(379.03894, 529.877197, -2865.573, -0.827417374, 0, 0.561587453, 0, 1, 0, -0.561587453, 0, -0.827417374)
        elseif selectedOption == "Devourers Jaw" then
             destinationCFrame = CFrame.new(480.652008, 505.846497, -1864.401, -0.491986394, 0, -0.870603323, 0, 1, 0, 0.870603323, 0, -0.491986394)
        end

        if teleportMode == "Instant" then
            -- Instant teleportation
        HumanoidRootPart.CFrame = destinationCFrame
        elseif teleportMode == "Tween" then
            -- Tween teleportation
            local tweenInfo = TweenInfo.new((destinationCFrame.Position - HumanoidRootPart.Position).Magnitude / TweenSpeed)
            local tween = TweenService:Create(HumanoidRootPart, tweenInfo, {CFrame = destinationCFrame})
            tween:Play()
        end
    end,
})



-- [GUI SETTINGS]
local Settings = Window:CreateTab("Settings")
local SettingsSection = Settings:CreateSection("Settings")

local DestroyGuiButton = Settings:CreateButton({
    Name = "Destroy GUI",
    Callback = function()
        -- The function that takes place when the button is pressed
        Rayfield:Destroy()
    end,
})

 local FOV = Settings:CreateSlider({
    Name = "Field Of View",
    Range = {70, 120},
    Increment = 10,
    Suffix = "FOV",
    CurrentValue = 70,
    Flag = "FOVSlider", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    -- The function that takes place when the slider changes
    -- The variable (Value) is a number which correlates to the value the slider is currently at
    workspace.Camera.FieldOfView = Value
    end,
 })
